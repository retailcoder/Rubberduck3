<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Rubberduck.UI.Styles"
                    xmlns:b="clr-namespace:Rubberduck.UI.Behaviors"
                    xmlns:converters="clr-namespace:Rubberduck.UI.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Rubberduck.UI;component/Styles/Icons.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Rubberduck.UI;component/Themes/DarkTheme.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--<Style TargetType="ScrollViewer">
        <Style.Setters>
            <Setter Property="b:ScrollViewerCorrector.FixScrolling" Value="True" />
        </Style.Setters>
    </Style>-->

    <!-- <dragablz> -->
    <!-- these tab styles are as close as possible to the default .net styles, so the tab will fit straight in to an unstyled app -->
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

    <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F0F0F0" Offset="0.0"/>
        <GradientStop Color="#E5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECF4FC" Offset="0.0"/>
        <GradientStop Color="#DCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
    <!-- </dragablz> -->
    
    <Color x:Key="ThemeWhiteDarkColor">#FFA9A9A9</Color>
    <Color x:Key="ThemeWhiteMediumColor">#FFD3D3D3</Color>
    <Color x:Key="ThemeWhiteLightColor">#FFFFFFFF</Color>
    <Color x:Key="ThemeWhiteDarkColor50">#0FA9A9A9</Color>
    <Color x:Key="ThemeWhiteMediumColor50">#0FD3D3D3</Color>
    <Color x:Key="ThemeWhiteLightColor75">#C0FFFFFF</Color>
    <Color x:Key="ThemeWhiteLightColor50">#0FFFFFFF</Color>
    <Color x:Key="ThemeWhiteDarkColor25">#08A9A9A9</Color>
    <Color x:Key="ThemeWhiteMediumColor25">#08D3D3D3</Color>
    <Color x:Key="ThemeWhiteLightColor25">#08FFFFFF</Color>

    <SolidColorBrush x:Key="ThemeWhiteDarkColorBrush" Color="{DynamicResource ThemeWhiteDarkColor}" />
    <SolidColorBrush x:Key="ThemeWhiteMediumColorBrush" Color="{DynamicResource ThemeWhiteMediumColor}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush" Color="{DynamicResource ThemeWhiteLightColor}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush75" Color="{DynamicResource ThemeWhiteLightColor75}" />
    <SolidColorBrush x:Key="ThemeWhiteDarkColorBrush50" Color="{DynamicResource ThemeWhiteDarkColor50}" />
    <SolidColorBrush x:Key="ThemeWhiteMediumColorBrush50" Color="{DynamicResource ThemeWhiteMediumColor50}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush50" Color="{DynamicResource ThemeWhiteLightColor50}" />
    <SolidColorBrush x:Key="ThemeWhiteDarkColorBrush25" Color="{DynamicResource ThemeWhiteDarkColor25}" />
    <SolidColorBrush x:Key="ThemeWhiteMediumColorBrush25" Color="{DynamicResource ThemeWhiteMediumColor25}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush25" Color="{DynamicResource ThemeWhiteLightColor25}" />

    <Color x:Key="ThemeBlackDarkColor">#FF1E1E1E</Color>
    <Color x:Key="ThemeBlackMediumColor">#FF2E2E2E</Color>
    <Color x:Key="ThemeBlackLightColor">#FF333333</Color>
    <Color x:Key="ThemeBlackDarkColor75">#C01E1E1E</Color>
    <Color x:Key="ThemeBlackDarkColor50">#0F1E1E1E</Color>
    <Color x:Key="ThemeBlackMediumColor50">#0F2E2E2E</Color>
    <Color x:Key="ThemeBlackLightColor50">#0F333333</Color>
    <Color x:Key="ThemeBlackDarkColor25">#081E1E1E</Color>
    <Color x:Key="ThemeBlackMediumColor25">#082E2E2E</Color>
    <Color x:Key="ThemeBlackLightColor25">#08333333</Color>

    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush" Color="{DynamicResource ThemeBlackDarkColor}" />
    <SolidColorBrush x:Key="ThemeBlackMediumColorBrush" Color="{DynamicResource ThemeBlackMediumColor}" />
    <SolidColorBrush x:Key="ThemeBlackLightColorBrush" Color="{DynamicResource ThemeBlackLightColor}" />
    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush50" Color="{DynamicResource ThemeBlackDarkColor50}" />
    <SolidColorBrush x:Key="ThemeBlackMediumColorBrush50" Color="{DynamicResource ThemeBlackMediumColor50}" />
    <SolidColorBrush x:Key="ThemeBlackLightColorBrush50" Color="{DynamicResource ThemeBlackLightColor50}" />
    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush25" Color="{DynamicResource ThemeBlackDarkColor25}" />
    <SolidColorBrush x:Key="ThemeBlackMediumColorBrush25" Color="{DynamicResource ThemeBlackMediumColor25}" />
    <SolidColorBrush x:Key="ThemeBlackLightColorBrush25" Color="{DynamicResource ThemeBlackLightColor25}" />

    <converters:WrapPanelItemWidthConverter x:Key="WrapPanelItemWidthConverter" />
    <converters:BoolToVisibleVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:BoolToHiddenVisibilityConverter x:Key="BoolToHiddenVisibility" />
    <converters:InvertBoolValueConverter x:Key="InverseBoolConverter" />
    <converters:SelectedItemToBooleanConverter x:Key="HasSelectedItems"/>
    <converters:WindowStateToVisibilityConverter x:Key="WindowStateToRestoreVisibility" VisibleState="Maximized" HiddenState="Normal" />
    <converters:WindowStateToVisibilityConverter x:Key="WindowStateToMaximizeVisibility" VisibleState="Normal" HiddenState="Maximized" />

    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="{DynamicResource ThemeAccent1MediumColor}"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="{DynamicResource ThemeAccent1DarkColor}"/>
        
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanHorizontallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" CanVerticallyScroll="False" Grid.Column="0" Content="{TemplateBinding Content}" CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Border Grid.RowSpan="2" 
                    Background="{DynamicResource ThemeBackgroundMediumColorBrush}" />

            <!-- Title bar -->
            
            <DockPanel Margin="10,10,10,0"
                       HorizontalAlignment="Left" 
                       VerticalAlignment="Top">
                
                <Button DockPanel.Dock="Left"
                        Command="{x:Static SystemCommands.ShowSystemMenuCommand}">
                    <Button.Template>
                        <ControlTemplate>
                            <Image x:Name="AppIcon" 
                                   Width="20" 
                                   Height="20" 
                                   Stretch="UniformToFill"
                                   VerticalAlignment="Top" 
                                   HorizontalAlignment="Left"
                                   Source="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                
                <TextBlock x:Name="AppTitle" 
                           DockPanel.Dock="Left"
                           Margin="2"
                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                           FontWeight="SemiBold" 
                           Foreground="{DynamicResource ThemeTextColorBrush}" />
            </DockPanel>
            
            <TextBlock x:Name="ActiveDocumentTitle" Margin="0,2"
                        VerticalAlignment="Top" 
                        HorizontalAlignment="Center"
                        Text="" /> <!-- TODO binding here -->

            <!-- TODO templates! -->
            <DockPanel VerticalAlignment="Top" 
                       HorizontalAlignment="Right">

                <Button x:Name="ControlBoxCloseButton" Margin="1,0" 
                        DockPanel.Dock="Right"
                        Style="{DynamicResource ControlBoxButtonStyle}"
                        Command="{x:Static SystemCommands.CloseWindowCommand}" 
                        ToolTip="Close">
                    <Canvas Style="{DynamicResource ControlBoxButtonCanvasStyle}">
                        <Image Source="{DynamicResource XMarkIcon}"
                               Style="{DynamicResource ControlBoxButtonImageStyle}" />
                        <Rectangle Fill="{Binding Foreground, ElementName=ControlBoxCloseButton, Mode=OneWay}"
                                   Style="{DynamicResource ControlBoxButtonMaskRectangleStyle}">
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="{DynamicResource XMarkIcon}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Canvas>
                </Button>

                <Button x:Name="ControlBoxMaximizeButton" Margin="1,0"
                        DockPanel.Dock="Right"
                        Style="{DynamicResource ControlBoxButtonStyle}" 
                        Command="{x:Static SystemCommands.MaximizeWindowCommand}" 
                        Visibility="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}, Converter={StaticResource WindowStateToMaximizeVisibility}}"
                        ToolTip="Maximize">
                    <Canvas Style="{DynamicResource ControlBoxButtonCanvasStyle}">
                        <Image Source="{DynamicResource WindowMaximizeIcon}"
                               Style="{DynamicResource ControlBoxButtonImageStyle}"/>
                        <Rectangle Fill="{Binding Foreground, ElementName=ControlBoxMaximizeButton}"
                                   Style="{DynamicResource ControlBoxButtonMaskRectangleStyle}">
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="{DynamicResource WindowMaximizeIcon}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Canvas>
                </Button>

                <Button x:Name="ControlBoxRestoreButton" Margin="1,0"
                        DockPanel.Dock="Right"
                        Style="{DynamicResource ControlBoxButtonStyle}"
                        Command="{x:Static SystemCommands.RestoreWindowCommand}"
                        Visibility="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}, Converter={StaticResource WindowStateToRestoreVisibility}}"
                        ToolTip="Restore">
                    <Canvas Style="{DynamicResource ControlBoxButtonCanvasStyle}">
                        <Image Source="{DynamicResource WindowRestoreIcon}"
                               Style="{DynamicResource ControlBoxButtonImageStyle}"/>
                        <Rectangle Fill="{Binding Foreground, ElementName=ControlBoxRestoreButton}"
                                   Style="{DynamicResource ControlBoxButtonMaskRectangleStyle}">
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="{DynamicResource WindowRestoreIcon}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Canvas>
                </Button>

                <Button x:Name="ControlBoxMinimizeButton" Margin="1,0" 
                        DockPanel.Dock="Right"
                        Style="{DynamicResource ControlBoxButtonStyle}"
                        Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                        ToolTip="Minimize">
                    <Canvas Style="{DynamicResource ControlBoxButtonCanvasStyle}">
                        <Image Source="{DynamicResource WindowMinimizeIcon}"
                               Style="{DynamicResource ControlBoxButtonImageStyle}"/>
                        <Rectangle Fill="{Binding Foreground, ElementName=ControlBoxMinimizeButton}"
                                   Style="{DynamicResource ControlBoxButtonMaskRectangleStyle}">
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="{DynamicResource WindowMinimizeIcon}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Canvas>
                </Button>

            </DockPanel>

            <Border Grid.Row="1" Background="{DynamicResource ThemeBackgroundLightColorBrush}" Margin="8" CornerRadius="12">
                <ContentPresenter x:Name="ClientArea" Content="{TemplateBinding Content}" />
            </Border>
            
        </Grid>
    </ControlTemplate>

        <!-- note: key seems to be required, WindowChrome doesn't seem to work correctly without :( -->
    <Style x:Key="ThemedWindowStyle" TargetType="{x:Type Window}">
        <Style.Setters>
            <Setter Property="Icon" Value="{StaticResource DuckyIcon}" />
            <Setter Property="Title" Value="Rubberduck" />
            <Setter Property="MinHeight" Value="200" />
            <Setter Property="MinWidth" Value="400" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="WindowState" Value="Normal" />
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1LightColorBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundDarkColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ShowInTaskbar, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                    <Condition Binding="{Binding ExtendWindowChrome}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource WindowTemplate}" />
                    <Setter Property="WindowChrome.WindowChrome">
                        <Setter.Value>
                            <WindowChrome />
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ControlBoxButtonMaskRectangleStyle" TargetType="{x:Type Rectangle}">
        <Style.Setters>
            <Setter Property="Height" Value="16" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Fill" Value="{DynamicResource ThemeBlackLightColorBrush}" />
        </Style.Setters>
    </Style>
    <Style x:Key="ControlBoxButtonImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Stretch" Value="Fill" />
    </Style>
    <Style x:Key="ControlBoxButtonCanvasStyle" TargetType="{x:Type Canvas}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="FlatButtonStyle" TargetType="Button">
        <Style.Setters>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeWhiteDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextColorBrush}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource ThemeBackgroundLightColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ThemeTextInactiveColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="False">
                                <Setter Property="Background" Value="{DynamicResource ThemeBackgroundLightColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ThemeTextInactiveColorBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>
    
    <Style x:Key="ControlBoxButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    </Style>

    <ControlTemplate x:Key="FlatButtonTemplate" TargetType="{x:Type ButtonBase}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}}">
            <ContentPresenter x:Name="contentPresenter" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
    </ControlTemplate>

    <Style x:Key="ActionButtonStyle" TargetType="Button">
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="4" />
                <Setter Property="Margin" Value="5,0" />
            </Style>
        </Style.Resources>
        <Style.Setters>
            <Setter Property="MinWidth" Value="96" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Padding" Value="8,0"/>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDefault, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeAccent1TextColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeAccent1TextColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FormFieldNameLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
            <Setter Property="Margin" Value="0,5,0,0" />
            <Setter Property="MinHeight" Value="24" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormLabelStyleMedium" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="14" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="16" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormLabelStyleSmall" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="12" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormFieldValueLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeWhiteDarkColorBrush}" />
            <Setter Property="FontSize" Value="11" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextInactiveColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FormFieldDescriptionLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextInactiveColorBrush}" />
        </Style.Setters>
    </Style>
    
    <Style x:Key="FormFieldTextBoxStyle" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="Padding" Value="4,0" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Height" Value="24" />
            <Setter Property="MaxLines" Value="1" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeBackgroundLightColorBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeBackgroundLightColorBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="FormFieldReadOnlyTextBoxStyle" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="Padding" Value="4,0" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Height" Value="24" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FormFieldComboBoxStyle" TargetType="ComboBox">
        <Style.Setters>
            <Setter Property="Height" Value="24" />
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}">
                <Setter Property="Cursor" Value="Hand" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListItemTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="Regular" />
        </Style.Setters>
    </Style>
    <Style x:Key="SectionTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style.Setters>
    </Style>

    <Style x:Key="SectionBorderStyle" TargetType="Border">
        <Style.Setters>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundMediumColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="CornerRadius" Value="8" />
            <Setter Property="Padding" Value="10,10,10,10" />
        </Style.Setters>
    </Style>

    <Style x:Key="SectionExpanderHeaderStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextColorBrush}" />
    </Style>


    <Style x:Key="TreeViewContainerStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWay}" />
        <Setter Property="Visibility" Value="{Binding Filtered, Mode=OneWay, Converter={StaticResource BoolToHiddenVisibility}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <!--<EventSetter Event="MouseDoubleClick" Handler="TreeView_OnMouseDoubleClick" />
        <EventSetter Event="MouseRightButtonDown" Handler="TreeView_OnMouseRightButtonDown" />
        <EventSetter Event="DragOver" Handler="TreeView_OnDragOver" />
        <EventSetter Event="Drop" Handler="TreeView_OnDrop" />
        <EventSetter Event="PreviewQueryContinueDrag" Handler="TreeView_PreviewContinueDrag" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="TreeView_PreviewMouseLeftButtonDown" />
        <EventSetter Event="PreviewMouseMove" Handler="TreeView_PreviewMouseMove" />-->
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource HighlightBorderActiveBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource HighlightInactiveBorderBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>

</ResourceDictionary>